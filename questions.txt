
Список вопросов к экзамену:
===============================================================================
1. Что такое Internet (Социальный, технологический, инженерный аспекты)
2. Что такое WEB и WWW
3. Отличия понятий Internet, WEB, WWW
4. Как соотносятся форматы представления данных, с понятиями Internet, компьютерная сеть, WEB, WWW
5. Что такое компьютерная сеть
6. Отличия локальной сети от интернета, критерии различения
7. Форматы обмена данными в современных приложениях: HTML, XML, JSON
8. Различия в форматах HTML, XML, JSON
9. Преимущества использования формата JSON с т.з. программиста
10. Характерные особенности и отличия протоколов прикладного уровня от протоколов нижележащих уровней
11. Примеры протоколов прикладного уровня с которыми вы встречались и работали
12. Характерные особенности, значимость, распространённость протокола HTTP
13. Причины популярности протокола HTTP в современном мире
14. Отличия протоколов HTTP и HTTPs
15. Утилиты для работы (анализа, дебаггинга, траблшутинга) протокола HTTP
16. Что такое WEB-browser, с какими форматами данных и протоколами он работает, примеры распространённых WEB-browser'ов
17. Что такое WEB-server, принципы работы, примеры распространённых WEB-server'ов
18. Система доменных имён DNS. Сама система как таковая, одноимённый протокол
19. Утилиты для работы с протоколом DNS для произвольной ОС
20. Стек протоколов TCP/IP, отличительные особенности, место в современном мире
21. Протоколы TCP, UDP. Для чего предназначены, что общего и какие различия
22. Разновидности адресации (IP, port) на разных уровнях протокола в стеке протоколов TCP/IP
23. Что такое сокет, его характеристики, жизненный цикл с т.з. прикладного программиста
24. Различия в ролях прикладного и системного ПО в работе сетевого стека (ОС, FireWall, Прикладное ПО)
25. Сетевые утилиты для анализа и инспектирования сетевого стека ОС


Задание на контрольную работу №1
===============================================================================
a. Написать серверную часть сетевого приложения для обмена данными с использованием TCP сокетов на языке С#

Сервер ожидает клиентских подключения на произвольный TCP порт и ip адрес, по вашему желанию
После подключения очередного клиента сервер принимает от него произвольную строку
Сервер производит произвольную модификацию строки, по вашему желанию
Сервер возвращает клиенту модифицированную строку
Сервер закрывает сетевое подключение к клиенту
Сервер ожидает клиентских подключений на произвольный TCP порт и ip адрес, по вашему желанию
...

b. Написать клиентскую часть сетевого приложения для обмена данными с использованием TCP сокетов на языке С#

Клиент подключается к серверу
Клиент отправляет серверу строку полученную от пользователя 
Клиент получает строку от сервера и выводит её на экран
Клиент закрывает сетевое подключение к серверу

Рекомендации по выбору библиотек, пространств имён и классов для выполнения контрольной работы:
-------------------------------------------------------------------------------
(System.Net.Sockets) https://docs.microsoft.com/ru-ru/dotnet/api/system.net.sockets?view=net-5.0
(TcpListener)        https://docs.microsoft.com/ru-ru/dotnet/api/system.net.sockets.tcplistener?view=net-5.0
(TcpClient)          https://docs.microsoft.com/ru-ru/dotnet/api/system.net.sockets.tcpclient?view=net-5.0



Задание на контрольную работу №2
===============================================================================
a. Разработать простой протокол прикладного уровня (наподобие HTTP) 

Существует два типа методов: "GET", "POST"
Существует пять типов заголовков: "DEFAULT", "RANDOM", "INVERT", "UPPER", "LOWER"
Причём, заголовки "DEFAULT", "RANDOM" допустимы только в методе "GET"
Зголовки "INVERT", "UPPER", "LOWER" допустимы только в методе "POST"
Тело сообщения обязательно присутствует только при использовании метода "POST"
Метод "GET" предназначен для получения строки от сервера
В сочетании с заголовком "DEFAULT" он предполагает получение произвольной, заранее определённой (естественно на сервере) строки от сервера
В сочетании с заголовком "RANDOM" он предполагает получение случайно сгенерированной (естественно на сервере) строки от сервера
Метод "POST" предназначен для получения строки от сервера, формируемой на основании тела запроса
В сочетании с заголовком "INVERT" он предполагает получение инвертированной (содержащейся в теле запроса) строки от сервера
В сочетании с заголовком "UPPER" он предполагает получение приведённой к верхнему регистру (содержащейся в теле запроса) строки от сервера
В сочетании с заголовком "LOWER" он предполагает получение приведённой к нижнему регистру (содержащейся в теле запроса) строки от сервера
-----------------------------------------------------------
Пример запроса:
  Метод: "GET", Заголовок: "DEFAULT" Тело: отсутствует
Пример ответа: 
  "Default response from server"
-----------------------------------------------------------
Пример запроса:
  Метод: "GET", Заголовок: "RANDOM", Тело: отсутствует
Пример ответа: "djfgherlgherighdfkgh"
-----------------------------------------------------------
Пример запроса:
  Метод: "POST", Заголовок: "INVERT", Тело: "abcdefg"
Пример ответа: "gfedcba"
-----------------------------------------------------------
Пример запроса:
  Метод: "POST", Заголовок: "UPPER", Тело: "abcdefg"
Пример ответа: "ABCDEFG"
-----------------------------------------------------------
Пример запроса:
  Метод: "POST", Заголовок: "LOWER", Тело: "ABCDEFG"
Пример ответа: "abcdefg"
-----------------------------------------------------------

b.Написать серверную часть сетевого приложения для обмена данными с использованием TCP сокетов и разработанного прикладного протокола на языке С#

Сервер ожидает клиентских подключения на произвольный TCP порт и ip адрес, по вашему желанию
После подключения очередного клиента сервер принимает от него запрос
Запрос состоит из трёх частей: метода, заголовка и тела сообщения
Сервер возвращает клиенту ответ в соответствии с вышеописанной логикой (пункт а)
Сервер закрывает сетевое подключение к клиенту
Сервер ожидает клиентских подключений на произвольный TCP порт и ip адрес, по вашему желанию
...


с. Написать клиентскую часть сетевого приложения для обмена данными с использованием TCP сокетов и разработанного прикладного протокола на языке С#

Клиент подключается к серверу
Клиент отправляет серверу запрос в соответствии с вышеописанной логикой (пункт а)
Запрос состоит из трёх частей: метода, заголовка и тела сообщения
Клиент получает ответ от сервера и выводит его на экран
Клиент закрывает сетевое подключение к серверу
